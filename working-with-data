Lists and Recursions-

Problem 4: Implement a function product, to compute product of a list of numbers.

Solution using loop:

def prodcut(nums):
  res = 1
  for num in nums:
    res *= num
  return res


Solution using recursion:

def product(nums):
    # If length of list is one,
    # return the number as there is no multiplication needed
    if len(nums) is 1:
        return nums[0]
    else:
        # get first and second element of list
        first, second = nums[0:2]
        # calculate product of first two numbers
        el = first*second
        # genereate new list with elements other than first two
        x = nums[2:]
        # Insert the multiply result at first position i.e 0
        x.insert(0, el)
        # Recursion call: with new list
        return product(x)
        
Problem 5: Write a function factorial to compute factorial of a number. Can you use the product function defined in the previous example to compute factorial?

with loop---

def fact(num):
  res = 1
  while num is not 0:
    res *= num
    num -= 1
  return res

with recursion --

def fact(num):
    if num is 1:
    return 1
  else: 
    return num * fact(num -1)
  
  
  Write a function reverse to reverse a list. Can you do this without using list slicing?
def reverse(nums):
    res = []
    for num in nums:
        res.insert(0, num)
    return res
    
    Problem 8: Cumulative sum of a list [a, b, c, ...] is defined as [a, a+b, a+b+c, ...]. Write a function cumulative_sum to compute cumulative sum of a list. Does your implementation work for a list of strings?
    for int only - 
    def cumulative_sum(nums):
    x = 0
    res = []
    for num in nums:
        x += str(num)
        res.append(x)
    return res
    
    for int and str - 
    def cumsum(list):
    res = []
    s = 0
    s1 = ''
    for el in list:
        if type(el) is str:
            s1 += el
            res.append(s1)
        else:
            s += el
            res.append(s)
    return res

Problem 10: Write a function unique to find all the unique elements of a list.
def unique(seq):
    res = []
    for e in seq:
        if e not in res:
            res.append(e)
    return res
    
Problem 11: Write a function dups to find all duplicates in the list.
Couldn't find...

Problem 12: Write a function group(list, size) that take a list and splits into smaller lists of given size.
def groups(l, n):
        res = []
        for e in range(0, len(l), n):
            res.append(l[e:e + n])
        return res

def lensort(list):
    """a function lensort to sort a list of strings based on length.
    >>> lensort(['python', 'perl', 'java', 'c', 'haskell', 'lisp', 'ocaml', 'smalltalk', 'ruby'])
    ['c', 'perl', 'java', 'lisp', 'ruby', 'ocaml', 'python', 'haskell', 'smalltalk']
    """
    
    list.sort(lambda x,y:len(x)-len(y))
    return list
    

def extsort(list):
    """a function extsort to sort a list of files based on extension.
    >>> extsort(['a.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt', 'x.c'])
    ['a.c', 'x.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt']
    """
    return sorted(list, cmp = lambda x, y: cmp(x.split(".")[1], y.split(".")[1]))
    
